# -*- coding: utf-8 -*-
"""Practical_Assignment2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1L-LWCwHyyYTsqYLRVX4wHdAuHXHNA_aN

### DES Code
"""

#-*- coding: utf8 -*-

PI = [58, 50, 42, 34, 26, 18, 10, 2,
      60, 52, 44, 36, 28, 20, 12, 4,
      62, 54, 46, 38, 30, 22, 14, 6,
      64, 56, 48, 40, 32, 24, 16, 8,
      57, 49, 41, 33, 25, 17, 9, 1,
      59, 51, 43, 35, 27, 19, 11, 3,
      61, 53, 45, 37, 29, 21, 13, 5,
      63, 55, 47, 39, 31, 23, 15, 7]


p_1_1 = [57, 49, 41, 33, 25, 17, 9,
        1, 58, 50, 42, 34, 26, 18,
        10, 2, 59, 51, 43, 35, 27,
        19, 11, 3, 60, 52, 44, 36,
        63, 55, 47, 39, 31, 23, 15,
        7, 62, 54, 46, 38, 30, 22,
        14, 6, 61, 53, 45, 37, 29,
        21, 13, 5, 28, 20, 12, 4]

p_2_2 = [14, 17, 11, 24, 1, 5, 3, 28,
        15, 6, 21, 10, 23, 19, 12, 4,
        26, 8, 16, 7, 27, 20, 13, 2,
        41, 52, 31, 37, 47, 55, 30, 40,
        51, 45, 33, 48, 44, 49, 39, 56,
        34, 53, 46, 42, 50, 36, 29, 32]

#Expand matrix to get a 48bits matrix of datas to apply the xor with Ki
E = [32, 1, 2, 3, 4, 5,
     4, 5, 6, 7, 8, 9,
     8, 9, 10, 11, 12, 13,
     12, 13, 14, 15, 16, 17,
     16, 17, 18, 19, 20, 21,
     20, 21, 22, 23, 24, 25,
     24, 25, 26, 27, 28, 29,
     28, 29, 30, 31, 32, 1]

S_BOX = [         
[[14, 4, 13, 1, 2, 15, 11, 8, 3, 10, 6, 12, 5, 9, 0, 7],
 [0, 15, 7, 4, 14, 2, 13, 1, 10, 6, 12, 11, 9, 5, 3, 8],
 [4, 1, 14, 8, 13, 6, 2, 11, 15, 12, 9, 7, 3, 10, 5, 0],
 [15, 12, 8, 2, 4, 9, 1, 7, 5, 11, 3, 14, 10, 0, 6, 13],
],

[[15, 1, 8, 14, 6, 11, 3, 4, 9, 7, 2, 13, 12, 0, 5, 10],
 [3, 13, 4, 7, 15, 2, 8, 14, 12, 0, 1, 10, 6, 9, 11, 5],
 [0, 14, 7, 11, 10, 4, 13, 1, 5, 8, 12, 6, 9, 3, 2, 15],
 [13, 8, 10, 1, 3, 15, 4, 2, 11, 6, 7, 12, 0, 5, 14, 9],
],

[[10, 0, 9, 14, 6, 3, 15, 5, 1, 13, 12, 7, 11, 4, 2, 8],
 [13, 7, 0, 9, 3, 4, 6, 10, 2, 8, 5, 14, 12, 11, 15, 1],
 [13, 6, 4, 9, 8, 15, 3, 0, 11, 1, 2, 12, 5, 10, 14, 7],
 [1, 10, 13, 0, 6, 9, 8, 7, 4, 15, 14, 3, 11, 5, 2, 12],
],

[[7, 13, 14, 3, 0, 6, 9, 10, 1, 2, 8, 5, 11, 12, 4, 15],
 [13, 8, 11, 5, 6, 15, 0, 3, 4, 7, 2, 12, 1, 10, 14, 9],
 [10, 6, 9, 0, 12, 11, 7, 13, 15, 1, 3, 14, 5, 2, 8, 4],
 [3, 15, 0, 6, 10, 1, 13, 8, 9, 4, 5, 11, 12, 7, 2, 14],
],  

[[2, 12, 4, 1, 7, 10, 11, 6, 8, 5, 3, 15, 13, 0, 14, 9],
 [14, 11, 2, 12, 4, 7, 13, 1, 5, 0, 15, 10, 3, 9, 8, 6],
 [4, 2, 1, 11, 10, 13, 7, 8, 15, 9, 12, 5, 6, 3, 0, 14],
 [11, 8, 12, 7, 1, 14, 2, 13, 6, 15, 0, 9, 10, 4, 5, 3],
], 

[[12, 1, 10, 15, 9, 2, 6, 8, 0, 13, 3, 4, 14, 7, 5, 11],
 [10, 15, 4, 2, 7, 12, 9, 5, 6, 1, 13, 14, 0, 11, 3, 8],
 [9, 14, 15, 5, 2, 8, 12, 3, 7, 0, 4, 10, 1, 13, 11, 6],
 [4, 3, 2, 12, 9, 5, 15, 10, 11, 14, 1, 7, 6, 0, 8, 13],
], 
[[4, 11, 2, 14, 15, 0, 8, 13, 3, 12, 9, 7, 5, 10, 6, 1],
 [13, 0, 11, 7, 4, 9, 1, 10, 14, 3, 5, 12, 2, 15, 8, 6],
 [1, 4, 11, 13, 12, 3, 7, 14, 10, 15, 6, 8, 0, 5, 9, 2],
 [6, 11, 13, 8, 1, 4, 10, 7, 9, 5, 0, 15, 14, 2, 3, 12],
],
   
[[13, 2, 8, 4, 6, 15, 11, 1, 10, 9, 3, 14, 5, 0, 12, 7],
 [1, 15, 13, 8, 10, 3, 7, 4, 12, 5, 6, 11, 0, 14, 9, 2],
 [7, 11, 4, 1, 9, 12, 14, 2, 0, 6, 10, 13, 15, 3, 5, 8],
 [2, 1, 14, 7, 4, 10, 8, 13, 15, 12, 9, 0, 3, 5, 6, 11],
]
]




#Permut made after each SBox substitution for each round
P = [16, 7, 20, 21, 29, 12, 28, 17,
     1, 15, 23, 26, 5, 18, 31, 10,
     2, 8, 24, 14, 32, 27, 3, 9,
     19, 13, 30, 6, 22, 11, 4, 25]

#Final permut
PI_1 = [40, 8, 48, 16, 56, 24, 64, 32,
        39, 7, 47, 15, 55, 23, 63, 31,
        38, 6, 46, 14, 54, 22, 62, 30,
        37, 5, 45, 13, 53, 21, 61, 29,
        36, 4, 44, 12, 52, 20, 60, 28,
        35, 3, 43, 11, 51, 19, 59, 27,
        34, 2, 42, 10, 50, 18, 58, 26,
        33, 1, 41, 9, 49, 17, 57, 25]

#Matrix for shift for each round of keys
SHIFT = [1,1,2,2,2,2,2,2,1,2,2,2,2,2,2,1]

def string_to_bit_array(text):#to convert a list of bits
    array = list()
    for char in text:
        binval = binvalue(char, 8)
        array.extend([int(x) for x in list(binval)]) #Add the bits to the final list
    return array

def bit_array_to_string(array): #Recreate the string from bit array
    res = ''.join([chr(int(y,2)) for y in [''.join([str(x) for x in _bytes]) for _bytes in  nsplit(array,8)]])   
    return res

def binvalue(val, bitsize): # binary value as a string of the given size is returned 
    binval = bin(val)[2:] if isinstance(val, int) else bin(ord(val))[2:]
    if len(binval) > bitsize:
        raise "binary value larger than the expected size"
    while len(binval) < bitsize:
        binval = "0"+binval #padding 0s
    return binval

def nsplit(s, n):
    return [s[k:k+n] for k in range(0, len(s), n)]

Encode=1
Decode=0



class des_fun():
    def __init__(self):
        self.password = None
        self.text = None
        self.kys = list()    
    
    def substitute(self, d_e):

        subblocks = nsplit(d_e, 6)#Split bit array into sublist of 6 bits
        ans = list()
        for i in range(len(subblocks)):
            block = subblocks[i]
            r = int(str(block[0])+str(block[5]),2)
            c = int(''.join([str(x) for x in block[1:][:-1]]),2) #Column is the 2,3,4,5th bits
            val = S_BOX[i][r][c]
            bin = binvalue(val, 4)
            ans += [int(x) for x in bin]# append it to the final list
        return ans
        
    def permut(self, block, table):#Permut the given block using the given table (so generic method)
        return [block[x-1] for x in table]
    
    def expand(self, block, table):
        return [block[x-1] for x in table]
    
    def xor(self, t1, t2):
        return [x^y for x,y in zip(t1,t2)]
    
    def generatekys(self):
        self.kys = []
        key = string_to_bit_array(self.password)
        key = self.permut(key, p_1_1) 
        g, d = nsplit(key, 28)
        for i in range(16):# the 16 rounds
            g, d = self.shift(g, d, SHIFT[i]) 
            temp = g + d #Merge
            self.kys.append(self.permut(temp, p_2_2)) 
    def shift(self, g, d, n): 
        return g[n:] + g[:n], d[n:] + d[:n]
    
    def add_padding(self):
        pad_len = 8 - (len(self.text) % 8)
        self.text += pad_len * chr(pad_len)
    
    def remove_padding(self, data):#Remove the padding
        pad_len = ord(data[-1])
        return data[:-pad_len]
    
    def encode(self, key, text, padding=False):
        return self.start(key, text, Encode, padding)
    
    def decode(self, key, text, padding=False):
        return self.start(key, text, Decode, padding)
    def start(self, key, text, action=Encode, padding=False):
        if len(key) < 8:
            raise "Key not 8 bytes long"
        elif len(key) > 8:
            key = key[:8] 
        
        self.password = key
        self.text = text
        
        rounds = [] # changed
        
        if padding and action==Encode:
            self.add_padding()
        elif len(self.text) % 8 != 0:
            raise "Data size not a multiple of 8"
        
        self.generatekys() 
        text_blocks = nsplit(self.text, 8) 
        ans = list()
        for block in text_blocks:
            block = string_to_bit_array(block)
            block = self.permut(block,PI)
            g, d = nsplit(block, 32) 
            temp = None
            for i in range(16): #16 rounds
                d_e = self.expand(d, E) #Expand d to match Ki size (48bits)
                if action == Encode:
                    temp = self.xor(self.kys[i], d_e)#If encode use Ki
                else:
                    temp = self.xor(self.kys[15-i], d_e)#decode start by the last key
                temp = self.substitute(temp) 
                temp = self.permut(temp, P)
                temp = self.xor(g, temp)
                g = d
                d = temp
                rounds.append([g, d]) 
            ans += self.permut(d+g, PI_1) 
        final_res = bit_array_to_string(ans)
        if padding and action==Decode:
            return self.remove_padding(final_res), rounds 
        else:
            return final_res, rounds 
    
if __name__ == '__main__':
    key = "secretke"
    text= "Hello da"
    d = des_fun()
    r, rounds = d.encode(key,text)
    r2, roudnds2 = d.decode(key,r)

"""### Different plaintexts with single key"""

import random
import string
import pandas as pd

# To given Hamming Distances for given DES rounds for different text and same key
def hamming_distance(R1, R2, ihamming_distance):
    y = [ihamming_distance]
    for i in range(16):
        hamming_distance = 0
        for k in range(2):
            for j in range(32):
                if R1[i][k][j] != R2[i][k][j]:
                    hamming_distance += 1
        y.append(hamming_distance)
    return y

# results
def makeplot(key, texts):
    df = pd.DataFrame()
    for i in range(1,6):
        r1, R1 = d.encode(key, texts[0])
        r2, R2 = d.encode(key, texts[i])
        y = hamming_distance(R1, R2, i);
        df['hamming_distance'+str(i)] = y
    df = df.T
    boxplot = df.boxplot()
    boxplot.set_xlabel("Rounds")
    boxplot.set_ylabel("Hamming Distances")
    print('Plot for same key for different text')
    print(boxplot)

key = ''.join(random.choice(string.ascii_lowercase) for i in range(8))
texts = ['krish na', 'arish na', 'krish nb', 'krish ma', 'lrish na', 'lrjsh na']
d = des_fun()

makeplot(key, texts)

"""### Different kys with single plain text"""

import random
import string
import pandas as pd

def hamming_distance(R1, R2, ihamming_distance):
    y = [0]
    for i in range(16):
        hamming_distance = 0
        for k in range(2):
            for j in range(32):
                if R1[i][k][j] != R2[i][k][j]:
                    hamming_distance += 1
        y.append(hamming_distance)
    return y

# It plots the box plot for distict Rounds
def makeplot(text,kys):
    df = pd.DataFrame()
    for i in range(1,6):
        r1, R1 = d.encode(kys[0], text)
        r2, R2 = d.encode(kys[i], text)
        y = hamming_distance(R1, R2, i);
        df['hamming_distance'+str(i)] = y
    df = df.T
    boxplot = df.boxplot()
    boxplot.set_xlabel("Rounds")
    boxplot.set_ylabel("Hamming Distances")
    print('plot for same text & different key')
    print(boxplot)


plaintext = ''.join(random.choice(string.ascii_lowercase) for i in range(8))
# distinct kys with distinct Hamming Distances
kys = ['krish na', 'arish na', 'krish nb', 'krish ma', 'lrish na', 'lrjsh na']
        

d = des_fun()

makeplot(plaintext,kys)

